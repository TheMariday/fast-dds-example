// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file string_message.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__STRING_MESSAGE_HPP
#define FAST_DDS_GENERATED__STRING_MESSAGE_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STRING_MESSAGE_SOURCE)
#define STRING_MESSAGE_DllAPI __declspec( dllexport )
#else
#define STRING_MESSAGE_DllAPI __declspec( dllimport )
#endif // STRING_MESSAGE_SOURCE
#else
#define STRING_MESSAGE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STRING_MESSAGE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure StringMessage defined by the user in the IDL file.
 * @ingroup string_message
 */
class StringMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StringMessage()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StringMessage()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StringMessage that will be copied.
     */
    eProsima_user_DllExport StringMessage(
            const StringMessage& x)
    {
                    m_message = x.m_message;

                    m_timestamp = x.m_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StringMessage that will be copied.
     */
    eProsima_user_DllExport StringMessage(
            StringMessage&& x) noexcept
    {
        m_message = std::move(x.m_message);
        m_timestamp = x.m_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StringMessage that will be copied.
     */
    eProsima_user_DllExport StringMessage& operator =(
            const StringMessage& x)
    {

                    m_message = x.m_message;

                    m_timestamp = x.m_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StringMessage that will be copied.
     */
    eProsima_user_DllExport StringMessage& operator =(
            StringMessage&& x) noexcept
    {

        m_message = std::move(x.m_message);
        m_timestamp = x.m_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x StringMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StringMessage& x) const
    {
        return (m_message == x.m_message &&
           m_timestamp == x.m_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x StringMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StringMessage& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message)
    {
        m_message = _message;
    }

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message)
    {
        m_message = std::move(_message);
    }

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const
    {
        return m_message;
    }

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message()
    {
        return m_message;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }



private:

    std::string m_message;
    uint64_t m_timestamp{0};

};

#endif // _FAST_DDS_GENERATED_STRING_MESSAGE_HPP_


